package bot

import (
	"fmt"
	"io"
	"net/http"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/sirupsen/logrus"

	"upd-loader-go/internal/config"
	"upd-loader-go/internal/processor"
)

// TelegramUPDBot represents Telegram bot for UPD processing
type TelegramUPDBot struct {
	config    *config.Config
	bot       *tgbotapi.BotAPI
	processor *processor.UPDProcessor
	logger    *logrus.Logger
}

// NewTelegramUPDBot creates a new Telegram UPD bot
func NewTelegramUPDBot(cfg *config.Config, logger *logrus.Logger) (*TelegramUPDBot, error) {
	bot, err := tgbotapi.NewBotAPI(cfg.TelegramBotToken)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %v", err)
	}

	processor := processor.NewUPDProcessor(cfg, logger)

	return &TelegramUPDBot{
		config:    cfg,
		bot:       bot,
		processor: processor,
		logger:    logger,
	}, nil
}

// Run starts the bot
func (b *TelegramUPDBot) Run() error {
	b.logger.Info("Starting Telegram bot...")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			go b.handleUpdate(update)
		}
	}

	return nil
}

// handleUpdate handles incoming updates
func (b *TelegramUPDBot) handleUpdate(update tgbotapi.Update) {
	defer func() {
		if r := recover(); r != nil {
			b.logger.Errorf("Panic in handleUpdate: %v", r)
		}
	}()

	userID := update.Message.From.ID

	if !b.config.IsAuthorizedUser(userID) {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.")
		b.bot.Send(msg)
		return
	}

	if update.Message.IsCommand() {
		b.handleCommand(update)
	} else if update.Message.Document != nil {
		b.handleDocument(update)
	} else {
		b.handleText(update)
	}
}

// handleCommand handles bot commands
func (b *TelegramUPDBot) handleCommand(update tgbotapi.Update) {
	switch update.Message.Command() {
	case "start":
		b.handleStartCommand(update)
	case "help":
		b.handleHelpCommand(update)
	case "status":
		b.handleStatusCommand(update)
	default:
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.")
		b.bot.Send(msg)
	}
}

// handleStartCommand handles /start command
func (b *TelegramUPDBot) handleStartCommand(update tgbotapi.Update) {
	welcomeMessage := `ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –£–ü–î –≤ –ú–æ–π–°–∫–ª–∞–¥!

üìã –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤—ã —Å –£–ü–î –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Å—á–µ—Ç–∞-—Ñ–∞–∫—Ç—É—Ä—ã –≤ –ú–æ–π–°–∫–ª–∞–¥
‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö

üìé –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ ZIP —Ñ–∞–π–ª —Å –£–ü–î, –∏ —è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—é!

‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, welcomeMessage)
	b.bot.Send(msg)
}

// handleHelpCommand handles /help command
func (b *TelegramUPDBot) handleHelpCommand(update tgbotapi.Update) {
	helpMessage := fmt.Sprintf(`üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–æ–π–°–∫–ª–∞–¥

üìé –ö–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç—å –£–ü–î:
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ ZIP –∞—Ä—Ö–∏–≤ —Å –£–ü–î –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–æ–±—ã—á–Ω–æ 10-30 —Å–µ–∫—É–Ω–¥)
3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç

üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª–∞–º:
‚Ä¢ –§–æ—Ä–º–∞—Ç: ZIP –∞—Ä—Ö–∏–≤
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: %d –ú–ë
‚Ä¢ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: –£–ü–î –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

‚ùì –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`, b.config.MaxFileSize/1024/1024)

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, helpMessage)
	b.bot.Send(msg)
}

// handleStatusCommand handles /status command
func (b *TelegramUPDBot) handleStatusCommand(update tgbotapi.Update) {
	// Send checking message
	statusMsg := tgbotapi.NewMessage(update.Message.Chat.ID, "üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ú–æ–π–°–∫–ª–∞–¥...")
	sentMsg, err := b.bot.Send(statusMsg)
	if err != nil {
		b.logger.Errorf("Failed to send status message: %v", err)
		return
	}

	// Check MoySkald status
	statusInfo := b.processor.GetMoySkaldStatus()

	var resultMessage string
	if success, ok := statusInfo["success"].(bool); ok && success {
		// Format detailed success message
		employee, _ := statusInfo["employee"].(map[string]interface{})
		organization, _ := statusInfo["organization"].(map[string]interface{})
		permissions, _ := statusInfo["permissions"].(map[string]interface{})

		employeeName, _ := employee["name"].(string)
		employeeEmail, _ := employee["email"].(string)
		orgName, _ := organization["name"].(string)
		orgINN, _ := organization["inn"].(string)

		canCreateInvoices, _ := permissions["can_create_invoices"].(bool)
		canAccessCounterparties, _ := permissions["can_access_counterparties"].(bool)
		organizationsCount, _ := permissions["organizations_count"].(float64)

		resultMessage = fmt.Sprintf(`‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ú–æ–π–°–∫–ª–∞–¥:
   –ò–º—è: %s
   Email: %s

üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:
   –ù–∞–∑–≤–∞–Ω–∏–µ: %s
   –ò–ù–ù: %s

üîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞:
   %s –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–æ–≤-—Ñ–∞–∫—Ç—É—Ä
   %s –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞–º–∏
   üìä –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: %.0f

ü§ñ Telegram –±–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω
üìÅ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: –î–æ—Å—Ç—É–ø–Ω–∞

üéâ –ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –£–ü–î –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!`,
			employeeName, employeeEmail, orgName, orgINN,
			boolToEmoji(canCreateInvoices), boolToEmoji(canAccessCounterparties), organizationsCount)
	} else {
		// Format error message
		errorStr, _ := statusInfo["error"].(string)
		details, _ := statusInfo["details"].(string)

		resultMessage = fmt.Sprintf(`‚ö†Ô∏è –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã

‚ùå –ú–æ–π–°–∫–ª–∞–¥ API: %s
ü§ñ Telegram –±–æ—Ç: –ê–∫—Ç–∏–≤–µ–Ω

üìù –î–µ—Ç–∞–ª–∏: %s

üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥ API
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É`, errorStr, details)
	}

	// Edit the status message
	editMsg := tgbotapi.NewEditMessageText(update.Message.Chat.ID, sentMsg.MessageID, resultMessage)
	b.bot.Send(editMsg)
}

// handleDocument handles document uploads
func (b *TelegramUPDBot) handleDocument(update tgbotapi.Update) {
	userID := update.Message.From.ID
	document := update.Message.Document

	b.logger.Infof("Received document from user %d: %s", userID, document.FileName)

	// Send processing message
	processingMsg := tgbotapi.NewMessage(update.Message.Chat.ID,
		fmt.Sprintf(`üìÑ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: %s
üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –£–ü–î...

‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.`, document.FileName))

	sentMsg, err := b.bot.Send(processingMsg)
	if err != nil {
		b.logger.Errorf("Failed to send processing message: %v", err)
		return
	}

	// Download file
	fileContent, err := b.downloadFile(document.FileID)
	if err != nil {
		b.logger.Errorf("Failed to download file: %v", err)
		errorMsg := tgbotapi.NewEditMessageText(update.Message.Chat.ID, sentMsg.MessageID,
			"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
		b.bot.Send(errorMsg)
		return
	}

	// Process UPD
	result := b.processor.ProcessUPDFile(fileContent, document.FileName)

	// Send result
	editMsg := tgbotapi.NewEditMessageText(update.Message.Chat.ID, sentMsg.MessageID, result.Message)
	b.bot.Send(editMsg)

	if result.Success {
		b.logger.Infof("UPD successfully processed for user %d", userID)
	} else {
		b.logger.Warningf("UPD processing error for user %d: %s", userID, result.ErrorCode)
	}
}

// handleText handles text messages
func (b *TelegramUPDBot) handleText(update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID,
		`üìé –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –£–ü–î –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ ZIP –∞—Ä—Ö–∏–≤ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.

‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.`)
	b.bot.Send(msg)
}

// downloadFile downloads file from Telegram
func (b *TelegramUPDBot) downloadFile(fileID string) ([]byte, error) {
	file, err := b.bot.GetFile(tgbotapi.FileConfig{FileID: fileID})
	if err != nil {
		return nil, fmt.Errorf("failed to get file info: %v", err)
	}

	fileURL := file.Link(b.bot.Token)

	resp, err := http.Get(fileURL)
	if err != nil {
		return nil, fmt.Errorf("failed to download file: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("failed to download file: status %d", resp.StatusCode)
	}

	content, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read file content: %v", err)
	}

	return content, nil
}

// boolToEmoji converts boolean to emoji
func boolToEmoji(b bool) string {
	if b {
		return "‚úÖ"
	}
	return "‚ùå"
}